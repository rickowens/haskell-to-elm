on: [push]
name: Haskell Builds
jobs:
  build:
    name: Haskell Build
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc-version:
          - '8.4'
          - '8.6'
          - '8.8'
          - '8.10'
          - '9.0'
          - '9.2'
          - '9.4'
        cabal-version: ['3.8.1.0']
    steps:
      # Checkout
      - uses: actions/checkout@v3
        
      # Setup
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup
        if: steps.tooling-cache.outputs.cache-hit != 'true'
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      # Generate Plan
      - name: Configure the Build
        run: |
          cabal configure --enable-tests
          cabal build --dry-run

      # Restore cache
      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}

      # Build deps (for caching)
      - name: Cabal build dependencies
        run: cabal build all --only-dependencies

      # Save dependency cache
      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      # Cabal build
      - name: Cabal Bulid
        run: |
          cabal build all

      # Cabal test
      - name: Cabal Test
        run: |
          cabal test all

  # This is exactly the same as the `build` job, but during the configure step
  # we insert some hard constraints.
  lower-bound:
    name: Haskell Build (lower-bound)
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc-version:
          - '8.4'
        cabal-version: ['3.8.1.0']
    steps:
      # Checkout
      - uses: actions/checkout@v3
        
      # Setup
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup
        if: steps.tooling-cache.outputs.cache-hit != 'true'
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      # Generate Plan
      - name: Configure the Build
        run: |
          (cat << EOF
          tests: True
          packages: .
          constraints:
            base                 == 4.11.1.0,
            aeson                >= 1.4.0   && < 1.4.1,
            bound                >= 2.0.1   && < 2.0.2,
            elm-syntax           >= 0.3.0   && < 0.3.1,
            generics-sop         >= 0.4.0   && < 0.4.1,
            text                 >= 1.2.3.0 && < 1.2.4,
            time                 >= 1.8.0   && < 1.8.1,
            unordered-containers >= 0.2.9   && < 0.2.10,
            vector               >= 0.12    && < 0.12.1
          EOF
          ) > cabal.project

          cabal build --dry-run

      # Restore cache
      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}

      # Build deps (for caching)
      - name: Cabal build dependencies
        run: cabal build all --only-dependencies

      # Save dependency cache
      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      # Cabal build
      - name: Cabal Bulid
        run: |
          cabal build all

      # Cabal test
      - name: Cabal Test
        run: |
          cabal test all
